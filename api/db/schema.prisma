// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model WindsurfBoard {
  id                  Int     @id @default(autoincrement())
  brand               String
  fins                Int
  type                String
  model               String
  volume              Int
  imageUrl            String?
  userId              Int
  user                User    @relation(fields: [userId], references: [id])
}

model WindsurfSail {
  id                  Int     @id @default(autoincrement())
  brand               String
  size                Float
  type                String
  model               String
  cumber              Int?
  mastSize            Float?
  wishSize            Float?
  imageUrl            String?
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
}

model User {
  id                  Int @id @default(autoincrement())
  email               String  @unique
  username            String  @unique
  role                String
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String? @unique
  credentials         UserCredential[]
  windsurfBoards      WindsurfBoard[]
  windsurfSails       WindsurfSail[]
}

model UserCredential {
  id                  String  @id
  userId              Int
  user                User    @relation(fields: [userId], references: [id])
  publicKey           Bytes
  transports          String?
  counter             BigInt
}
